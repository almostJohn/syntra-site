// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  email          String         @unique
  display_name   String
  password       String
  email_verified Boolean        @default(false)
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  notes          Note[]
  boards         Board[]
  activities     Activity[]
  notifications  Notification[]
  user_sessions  UserSession[]
  owned_teams    Team[]         @relation("owned_teams")
  team_members   TeamMember[]
}

model Team {
  id         String       @id @default(cuid())
  name       String
  owner_id   String
  owner      User         @relation("owned_teams", fields: [owner_id], references: [id], onDelete: Cascade)
  members    TeamMember[]
  boards     Board[]
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
}

model TeamMember {
  id        String   @id @default(cuid())
  user_id   String
  team_id   String
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [team_id], references: [id], onDelete: Cascade)
  role      TeamRole @default(MEMBER)
  joined_at DateTime @default(now())

  @@unique([user_id, team_id])
}

model UserSession {
  id         String   @id @default(cuid())
  user_id    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  token      String   @unique
  expires_at DateTime
  created_at DateTime @default(now())
}

model Tag {
  id         String   @id @default(cuid())
  name       String   @unique
  notes      Note[]   @relation("note_tags")
  created_at DateTime @default(now())
}

model Note {
  id         String   @id @default(cuid())
  title      String?
  subtitle   String?
  content    String
  owner_id   String
  owner      User     @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  tags       Tag[]    @relation("note_tags")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Board {
  id         String   @id @default(cuid())
  title      String
  owner_id   String
  owner      User     @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  team_id    String?
  team       Team?    @relation(fields: [team_id], references: [id], onDelete: Cascade)
  statuses   Status[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Status {
  id         String   @id @default(cuid())
  name       String
  order      Int
  board_id   String
  board      Board    @relation(fields: [board_id], references: [id], onDelete: Cascade)
  tasks      Task[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Task {
  id         String   @id @default(cuid())
  title      String
  content    String
  status_id  String
  status     Status   @relation(fields: [status_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Activity {
  id         String       @id @default(cuid())
  type       ActivityType
  user_id    String
  user       User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at DateTime     @default(now())
}

model Notification {
  id         String           @id @default(cuid())
  user_id    String
  user       User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  title      String
  message    String
  read       Boolean          @default(false)
  type       NotificationType
  created_at DateTime         @default(now())
}

enum NotificationType {
  NOTE_CREATED
  BOARD_CREATED
  TASK_COMPLETED
  OTHER
}

enum ActivityType {
  CREATE_NOTE
  CREATE_BOARD
}

enum TeamRole {
  OWNER
  MEMBER
}
